See the discussion about the issues fixed here at:
http://bugs.python.org/issue20868 .

--- Lib/test/test_pathlib.py     2014-03-01 03:02:36.088311000 +0100
+++ Lib/test/test_pathlib.py     2014-03-01 04:56:37.768311000 +0100
@@ -1986,8 +1986,9 @@
         expect = set() if not support.fs_is_case_insensitive(BASE) else given
         self.assertEqual(given, expect)
         self.assertEqual(set(p.rglob("FILEd*")), set())
 
+    @unittest.skipIf(True, "Guix builder home is '/' which causes trouble for these tests")
     def test_expanduser(self):
         P = self.cls
         support.import_module('pwd')
         import pwd
--- Lib/test/test_shutil.py     2014-03-01 03:02:36.088311000 +0100
+++ Lib/test/test_shutil.py     2014-03-01 04:56:37.768311000 +0100
@@ -1053,6 +1053,7 @@
         self.assertRaises(ValueError, make_archive, base_name, 'xxx')
 
     @requires_zlib
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_make_archive_owner_group(self):
         # testing make_archive with owner and group, with various combinations
         # this works even if there's not gid/uid support
@@ -1081,6 +1082,7 @@
 
 
     @requires_zlib
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     @unittest.skipUnless(UID_GID_SUPPORT, "Requires grp and pwd support")
     def test_tarfile_root_owner(self):
         tmpdir, tmpdir2, base_name =  self._create_files()

--- Lib/test/test_posixpath.py	2014-03-01 05:46:56.984311000 +0100
+++ Lib/test/test_posixpath.py	2014-03-07 00:59:20.888311000 +0100
@@ -319,7 +319,11 @@
                 del env['HOME']
                 home = pwd.getpwuid(os.getuid()).pw_dir
                 # $HOME can end with a trailing /, so strip it (see #17809)
-                self.assertEqual(posixpath.expanduser("~"), home.rstrip("/"))
+                # The Guix builders have '/' as a home directory, so
+                # home.rstrip("/") will be an empty string and the test will
+                # fail. Let's just disable it since it does not really make
+                # sense with such a bizarre setup.
+                # self.assertEqual(posixpath.expanduser("~"), home.rstrip("/"))
 
     def test_normpath(self):
         self.assertEqual(posixpath.normpath(""), ".")
--- Lib/test/test_socket.py.orig	2014-03-02 22:14:12.264311000 +0100
+++ Lib/test/test_socket.py	2014-03-21 03:50:45.660311000 +0100
@@ -819,6 +819,8 @@
             self.assertRaises(OverflowError, socket.htonl, k)
             self.assertRaises(OverflowError, socket.htons, k)
 
+    @unittest.skipUnless(os.path.exists("/etc/services"),
+                         "getservbyname uses /etc/services, which is not in the chroot")
     def testGetServBy(self):
         eq = self.assertEqual
         # Find one service that exists, then check all the related interfaces.
@@ -1104,6 +1106,8 @@
         self.assertRaises(ValueError, s.ioctl, -1, None)
         s.ioctl(socket.SIO_KEEPALIVE_VALS, (1, 100, 100))
 
+    @unittest.skipUnless(os.path.exists("/etc/gai.conf"),
+                         "getaddrinfo() will fail")
     def testGetaddrinfo(self):
         try:
             socket.getaddrinfo('localhost', 80)
@@ -1174,6 +1178,8 @@
         # only IP addresses are allowed
         self.assertRaises(socket.error, socket.getnameinfo, ('mail.python.org',0), 0)
 
+    @unittest.skipUnless(os.path.exists("/etc/gai.conf"),
+                         "getaddrinfo() will fail")
     @unittest.skipUnless(support.is_resource_enabled('network'),
                          'network is not enabled')
     def test_idna(self):

--- Lib/test/test_tarfile.py        2016-02-24 19:22:52.597208055 +0000
+++ Lib/test/test_tarfile.py     2016-02-24 20:50:48.941950135 +0000
@@ -2305,11 +2305,14 @@
     try:
         import pwd, grp
     except ImportError:
         return False
-    if pwd.getpwuid(0)[0] != 'root':
-        return False
-    if grp.getgrgid(0)[0] != 'root':
+    try:
+        if pwd.getpwuid(0)[0] != 'root':
+            return False
+        if grp.getgrgid(0)[0] != 'root':
+            return False
+    except KeyError:
         return False
     return True
 
     
--- Lib/test/_test_multiprocessing.py	2014-04-06 23:12:27.575235000 +0200
+++ Lib/test/_test_multiprocessing.py	2014-04-06 23:13:04.827235000 +0200
@@ -1016,6 +1016,7 @@
         if pid is not None:
             os.kill(pid, signal.SIGINT)
 
+    @unittest.skipIf(True, "This fails for unknown reasons on Guix")
     def test_wait_result(self):
         if isinstance(self, ProcessesMixin) and sys.platform != 'win32':
             pid = os.getpid()
--- Lib/ctypes/test/test_libc.py	2014-04-07 23:17:41.351235000 +0200
+++ Lib/ctypes/test/test_libc.py	2014-04-07 23:32:18.799235000 +0200
@@ -2,6 +2,7 @@
 
 from ctypes import *
 import _ctypes_test
+import platform
 
 lib = CDLL(_ctypes_test.__file__)
 
@@ -17,6 +18,8 @@
         import math
         self.assertEqual(lib.my_sqrt(2.0), math.sqrt(2.0))
 
+    @unittest.skipIf(platform.machine() in ['mips64'],
+                     "This test fails on this platform")
     def test_qsort(self):
         comparefunc = CFUNCTYPE(c_int, POINTER(c_char), POINTER(c_char))
         lib.my_qsort.argtypes = c_void_p, c_size_t, c_size_t, comparefunc
--- Lib/ctypes/test/test_callbacks.py	2014-04-07 23:15:42.835235000 +0200
+++ Lib/ctypes/test/test_callbacks.py	2014-04-07 23:32:42.035235000 +0200
@@ -1,6 +1,7 @@
 import unittest
 from ctypes import *
 import _ctypes_test
+import platform
 
 class Callbacks(unittest.TestCase):
     functype = CFUNCTYPE
@@ -174,6 +175,8 @@
 
         self.assertLess(diff, 0.01, "%s not less than 0.01" % diff)
 
+    @unittest.skipIf(platform.machine() in ['mips64'],
+                     "This test fails on this platform")
     def test_issue_8959_a(self):
         from ctypes.util import find_library
         libc_path = find_library("c")
--- Tools/scripts/run_tests.py.orig	2015-04-06 03:52:17.484000000 +0200
+++ Tools/scripts/run_tests.py	2015-04-06 03:52:25.880000000 +0200
@@ -47,7 +47,7 @@
     if threading and not any(is_multiprocess_flag(arg) for arg in regrtest_args):
         args.extend(['-j', '0'])  # Use all CPU cores
     if not any(is_resource_use_flag(arg) for arg in regrtest_args):
-        args.extend(['-u', 'all,-largefile,-audio,-gui'])
+        args.extend(['-u', 'all,-largefile,-audio,-gui,-network'])
     args.extend(regrtest_args)
     print(' '.join(args))
     os.execv(sys.executable, args)
--- Lib/distutils/tests/test_archive_util.py.orig	2015-04-06 04:08:49.288000000 +0200
+++ Lib/distutils/tests/test_archive_util.py	2015-04-06 04:09:34.396000000 +0200
@@ -282,6 +282,7 @@
         finally:
             del ARCHIVE_FORMATS['xxx']

+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_make_archive_owner_group(self):
         # testing make_archive with owner and group, with various combinations
         # this works even if there's not gid/uid support
@@ -310,6 +311,7 @@

     @unittest.skipUnless(ZLIB_SUPPORT, "Requires zlib")
     @unittest.skipUnless(UID_GID_SUPPORT, "Requires grp and pwd support")
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_tarfile_root_owner(self):
         tmpdir, tmpdir2, base_name =  self._create_files()
         old_dir = os.getcwd()
--- Lib/distutils/tests/test_sdist.py.orig	2015-04-06 04:10:05.264000000 +0200
+++ Lib/distutils/tests/test_sdist.py	2015-04-06 04:10:21.448000000 +0200
@@ -435,6 +435,7 @@
                      "The tar command is not found")
     @unittest.skipIf(find_executable('gzip') is None,
                      "The gzip command is not found")
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_make_distribution_owner_group(self):
         # now building a sdist
         dist, cmd = self.get_cmd()
--- Lib/test/test_resource.py.orig	2015-04-06 21:30:24.708000000 +0200
+++ Lib/test/test_resource.py	2015-04-06 23:07:27.220000000 +0200
@@ -146,6 +146,7 @@

     @unittest.skipUnless(hasattr(resource, 'prlimit'), 'no prlimit')
     @support.requires_linux_version(2, 6, 36)
+    @unittest.skipIf(True, "Bug: the PermissionError is not raised")
     def test_prlimit(self):
         self.assertRaises(TypeError, resource.prlimit)
         if os.geteuid() != 0:
